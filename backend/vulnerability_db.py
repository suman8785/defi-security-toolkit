import sqlite3
import json
from datetime import datetime
from typing import Dict, List, Any
from pathlib import Path
from config import BASE_DIR

class VulnerabilityDatabase:
    """Local database for vulnerability patterns and historical data"""
    
    def _init_(self):
        self.db_path = BASE_DIR / "vulnerability_db.sqlite"
        self._init_database()
    
    def _init_database(self):
        """Initialize database tables"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Vulnerability patterns table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS vulnerability_patterns (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                pattern TEXT NOT NULL,
                severity TEXT NOT NULL,
                description TEXT,
                recommendation TEXT,
                cwe_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Historical findings table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS findings_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                contract_hash TEXT NOT NULL,
                vulnerability_type TEXT NOT NULL,
                severity TEXT NOT NULL,
                tool TEXT NOT NULL,
                details TEXT,
                found_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Known exploits table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS known_exploits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                exploit_code TEXT,
                affected_contracts TEXT,
                damage_usd REAL,
                date_occurred DATE,
                references TEXT
            )
        """)
        
        conn.commit()
        conn.close()
        
        # Populate with initial data
        self._populate_initial_data()
    
    def _populate_initial_data(self):
        """Add common vulnerability patterns"""
        patterns = [
            {
                'name': 'Reentrancy',
                'pattern': r'\.call\{.\}$.$.\n.*state.=',
                'severity': 'critical',
                'description': 'External call before state update',
                'recommendation': 'Use checks-effects-interactions pattern',
                'cwe_id': 'CWE-841'
            },
            {
                'name': 'Integer Overflow',
                'pattern': r'\+\+|--|\+=|-=|\*=',
                'severity': 'high',
                'description': 'Arithmetic operation without overflow check',
                'recommendation': 'Use SafeMath or Solidity 0.8+',
                'cwe_id': 'CWE-190'
            },
            {
                'name': 'Unchecked Return Value',
                'pattern': r'\.transfer\(|\.send\(',
                'severity': 'medium',
                'description': 'Return value of transfer/send not checked',
                'recommendation': 'Check return value or use .call()',
                'cwe_id': 'CWE-252'
            },
            {
                'name': 'tx.origin Authentication',
                'pattern': r'tx\.origin',
                'severity': 'high',
                'description': 'Using tx.origin for authentication',
                'recommendation': 'Use msg.sender instead',
                'cwe_id': 'CWE-477'
            }
        ]
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for pattern in patterns:
            cursor.execute("""
                INSERT OR IGNORE INTO vulnerability_patterns 
                (name, pattern, severity, description, recommendation, cwe_id)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                pattern['name'],
                pattern['pattern'],
                pattern['severity'],
                pattern['description'],
                pattern['recommendation'],
                pattern['cwe_id']
            ))
        
        # Add historical exploits
        exploits = [
            {
                'name': 'The DAO Hack',
                'description': 'Reentrancy attack on The DAO contract',
                'damage_usd': 60000000,
                'date_occurred': '2016-06-17',
                'references': 'https://blog.ethereum.org/2016/06/17/critical-update-re-dao-vulnerability/'
            },
            {
                'name': 'Parity Multisig Hack',
                'description': 'Delegatecall vulnerability in Parity wallet',
                'damage_usd': 30000000,
                'date_occurred': '2017-07-19',
                'references': 'https://blog.parity.io/the-multi-sig-hack-a-postmortem/'
            }
        ]
        
        for exploit in exploits:
            cursor.execute("""
                INSERT OR IGNORE INTO known_exploits 
                (name, description, damage_usd, date_occurred, references)
                VALUES (?, ?, ?, ?, ?)
            """, (
                exploit['name'],
                exploit['description'],
                exploit['damage_usd'],
                exploit['date_occurred'],
                exploit['references']
            ))
        
        conn.commit()
        conn.close()
    
    def get_vulnerability_patterns(self) -> List[Dict[str, Any]]:
        """Get all vulnerability patterns"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM vulnerability_patterns")
        patterns = []
        
        for row in cursor.fetchall():
            patterns.append({
                'id': row[0],
                'name': row[1],
                'pattern': row[2],
                'severity': row[3],
                'description': row[4],
                'recommendation': row[5],
                'cwe_id': row[6]
            })
        
        conn.close()
        return patterns
    
    def add_finding(self, contract_hash: str, vulnerability: Dict[str, Any], tool: str):
        """Record a vulnerability finding"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO findings_history 
            (contract_hash, vulnerability_type, severity, tool, details)
            VALUES (?, ?, ?, ?, ?)
        """, (
            contract_hash,
            vulnerability.get('title', 'Unknown'),
            vulnerability.get('severity', 'unknown'),
            tool,
            json.dumps(vulnerability)
        ))
        
        conn.commit()
        conn.close()
    
    def get_statistics(self) -> Dict[str, Any]:
        """Get vulnerability statistics"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Most common vulnerabilities
        cursor.execute("""
            SELECT vulnerability_type, COUNT(*) as count
            FROM findings_history
            GROUP BY vulnerability_type
            ORDER BY count DESC
            LIMIT 10
        """)
        
        common_vulns = [
            {'type': row[0], 'count': row[1]} 
            for row in cursor.fetchall()
        ]
        
        # Severity distribution
        cursor.execute("""
            SELECT severity, COUNT(*) as count
            FROM findings_history
            GROUP BY severity
        """)
        
        severity_dist = {
            row[0]: row[1] for row in cursor.fetchall()
        }
        
        # Tool effectiveness
        cursor.execute("""
            SELECT tool, COUNT(*) as count
            FROM findings_history
            GROUP BY tool
        """)
        
        tool_stats = {
            row[0]: row[1] for row in cursor.fetchall()
        }
        
        conn.close()
        
        return {
            'common_vulnerabilities': common_vulns,
            'severity_distribution': severity_dist,
            'tool_effectiveness': tool_stats
        }

# Module-level instance
vuln_db = VulnerabilityDatabase()

def get_patterns() -> List[Dict[str, Any]]:
    return vuln_db.get_vulnerability_patterns()

def record_finding(contract_hash: str, vulnerability: Dict[str, Any], tool: str):
    vuln_db.add_finding(contract_hash, vulnerability, tool)

def get_stats() -> Dict[str, Any]:
    return vuln_db.get_statistics()